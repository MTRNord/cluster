# ergo IRCd config

# network configuration
network:
    # name of the network
    name: midnightthoughts.space
# server configuration
server:
    # server name
    name: irc.midnightthoughts.space
    # addresses to listen on
    listeners:
        # The standard plaintext port for IRC is 6667. This will listen on all interfaces:
        ":6667":
            sts-only: true
        # Allowing plaintext over the public Internet poses security and privacy issues,
        # so if possible, we recommend that you comment out the above line and replace
        # it with these two, which listen only on local interfaces:
        #"127.0.0.1:6667": # (loopback ipv4, localhost-only)
        #"[::1]:6667":     # (loopback ipv6, localhost-only)
        # Alternately, if you have a TLS certificate issued by a recognized CA,
        # you can configure port 6667 as an STS-only listener that only serves
        # "redirects" to the TLS port, but doesn't allow chat. See the manual
        # for details.

        # The standard SSL/TLS port for IRC is 6697. This will listen on all interfaces:
        ":6697":
            tls:
                key: /ircd/tls/tls.key
                cert: /ircd/tls/tls.crt
            proxy: true
            min-tls-version: 1.2
            # 'proxy' is false here because internal traffic won't be routed through
            # the Kubernetes LoadBalancer. Relevant links:
            # https://github.com/kubernetes/kubernetes/issues/66607
            # https://github.com/kubernetes/kubernetes/pull/92312
        # Native websockets over TLS:
        ":443":
            websocket: true
            proxy: true
            # No tls here as we have a reverse proxy
        # Example of a Unix domain socket for proxying:
        # "/tmp/ergo_sock":
    # Example of a Tor listener: any connection that comes in on this listener will
    # be considered a Tor connection. It is strongly recommended that this listener
    # *not* be on a public interface --- it should be on 127.0.0.0/8 or unix domain:
    # "/hidden_service_sockets/ergo_tor_sock":
    #     tor: true

    # sets the permissions for Unix listen sockets. on a typical Linux system,
    # the default is 0775 or 0755, which prevents other users/groups from connecting
    # to the socket. With 0777, it behaves like a normal TCP socket
    # where anyone can connect.
    unix-bind-mode: 0777
    # configure the behavior of Tor listeners (ignored if you didn't enable any):
    tor-listeners:
        # if this is true, connections from Tor must authenticate with SASL
        require-sasl: false
        # what hostname should be displayed for Tor connections?
        vhost: "tor-network.onion"
        # allow at most this many connections at once (0 for no limit):
        max-connections: 64
        # connection throttling (limit how many connection attempts are allowed at once):
        throttle-duration: 10m
        # set to 0 to disable throttling:
        max-connections-per-duration: 64
    # strict transport security, to get clients to automagically use TLS
    sts:
        # whether to advertise STS
        #
        # to stop advertising STS, leave this enabled and set 'duration' below to "0". this will
        # advertise to connecting users that the STS policy they have saved is no longer valid
        enabled: true
        # how long clients should be forced to use TLS for.
        # setting this to a too-long time will mean bad things if you later remove your TLS.
        # the default duration below is 1 month, 2 days and 5 minutes.
        duration: 1mo2d5m
        # tls port - you should be listening on this port above
        port: 6697
        # should clients include this STS policy when they ship their inbuilt preload lists?
        preload: true
    websockets:
        # Restrict the origin of WebSocket connections by matching the "Origin" HTTP
        # header. This setting makes ergo reject every WebSocket connection,
        # except when it originates from one of the hosts in this list. Use this to
        # prevent malicious websites from making their visitors connect to ergo
        # without their knowledge. An empty list means that there are no restrictions.
        allowed-origins:
            - "https://midnightthoughts.space"
            - "https://*.midnightthoughts.space"
    # casemapping controls what kinds of strings are permitted as identifiers (nicknames,
    # channel names, account names, etc.), and how they are normalized for case.
    # with the recommended default of 'precis', utf-8 identifiers that are "sane"
    # (according to RFC 8265) are allowed, and the server additionally tries to protect
    # against confusable characters ("homoglyph attacks").
    # the other options are 'ascii' (traditional ASCII-only identifiers), and 'permissive',
    # which allows identifiers to contain unusual characters like emoji, but makes users
    # vulnerable to homoglyph attacks. unless you're really confident in your decision,
    # we recommend leaving this value at its default (changing it once the network is
    # already up and running is problematic).
    casemapping: "precis"
    # enforce-utf8 controls whether the server allows non-UTF8 bytes in messages
    # (as in traditional IRC) or preemptively discards non-UTF8 messages (since
    # they cannot be relayed to websocket clients).
    enforce-utf8: true
    # whether to look up user hostnames with reverse DNS
    # (to suppress this for privacy purposes, use the ip-cloaking options below)
    lookup-hostnames: false
    # whether to confirm hostname lookups using "forward-confirmed reverse DNS", i.e., for
    # any hostname returned from reverse DNS, resolve it back to an IP address and reject it
    # unless it matches the connecting IP
    forward-confirm-hostnames: true
    # use ident protocol to get usernames
    check-ident: false
    # ignore the supplied user/ident string from the USER command; always set the value to
    # `~user` (literally) instead. this can potentially reduce confusion and simplify bans.
    coerce-ident: "~u"
    # password to login to the server
    # generated using  "ergo genpasswd"
    #password: ""

    # motd filename
    # if you change the motd, you should move it to ircd.motd
    motd: ircd.motd
    # motd formatting codes
    # if this is true, the motd is escaped using formatting codes like $c, $b, and $i
    motd-formatting: true
    # relaying using the RELAYMSG command
    relaymsg:
        # is relaymsg enabled at all?
        enabled: true
        # which character(s) are reserved for relayed nicks?
        separators: "/"
        # can channel operators use RELAYMSG in their channels?
        # our implementation of RELAYMSG makes it safe for chanops to use without the
        # possibility of real users being silently spoofed
        available-to-chanops: true
    # addresses/CIDRs the PROXY command can be used from
    # this should be restricted to 127.0.0.1/8 and ::1/128 (unless you have a good reason)
    # you should also add these addresses to the connection limits and throttling exemption lists
    proxy-allowed-from:
        - 10.0.0.0/8
    # controls the use of the WEBIRC command (by IRC<->web interfaces, bouncers and similar)
    # webirc:
    #     # one webirc block -- should correspond to one set of gateways
    #     -
    #         # SHA-256 fingerprint of the TLS certificate the gateway must use to connect
    #         # (comment this out to use passwords only)
    #         fingerprint: "abcdef0123456789abcdef0123456789abcdef0123456789abcdef0123456789"

    #         # password the gateway uses to connect, made with ergo genpasswd
    #         password: "$2a$04$sLEFDpIOyUp55e6gTMKbOeroT6tMXTjPFvA0eGvwvImVR9pkwv7ee"

    #         # addresses/CIDRs that can use this webirc command
    #         # you should also add these addresses to the connection limits and throttling exemption lists
    #         hosts:
    #             # - localhost
    #             # - "192.168.1.1"
    #             # - "192.168.10.1/24"
    # maximum length of clients' sendQ in bytes
    # this should be big enough to hold bursts of channel/direct messages
    max-sendq: 96k
    # compatibility with legacy clients
    compatibility:
        # many clients require that the final parameter of certain messages be an
        # RFC1459 trailing parameter, i.e., prefixed with :, whether or not this is
        # actually required. this forces Oragono to send those parameters
        # as trailings. this is recommended unless you're testing clients for conformance;
        # defaults to true when unset for that reason.
        force-trailing: true
        # some clients (ZNC 1.6.x and lower, Pidgin 2.12 and lower) do not
        # respond correctly to SASL messages with the server name as a prefix:
        # https://github.com/znc/znc/issues/1212
        # this works around that bug, allowing them to use SASL.
        send-unprefixed-sasl: true
    # IP-based DoS protection
    ip-limits:
        # whether to limit the total number of concurrent connections per IP/CIDR
        count: true
        # maximum concurrent connections per IP/CIDR
        max-concurrent-connections: 16
        # whether to restrict the rate of new connections per IP/CIDR
        throttle: true
        # how long to keep track of connections for
        window: 10m
        # maximum number of new connections per IP/CIDR within the given duration
        max-connections-per-window: 32
        # how wide the CIDR should be for IPv4 (a /32 is a fully specified IPv4 address)
        cidr-len-ipv4: 32
        # how wide the CIDR should be for IPv6 (a /64 is the typical prefix assigned
        # by an ISP to an individual customer for their LAN)
        cidr-len-ipv6: 64
        # IPs/networks which are exempted from connection limits
        exempted:
            - "localhost"
            - "10.0.0.0/8"
        # custom connection limits for certain IPs/networks. note that CIDR
        # widths defined here override the default CIDR width --- the limit
        # will apply to the entire CIDR no matter how large or small it is
        custom-limits:
        # "8.8.0.0/16":
        #     max-concurrent-connections: 128
        #     max-connections-per-window: 1024
    # IP cloaking hides users' IP addresses from other users and from channel admins
    # (but not from server admins), while still allowing channel admins to ban
    # offending IP addresses or networks. In place of hostnames derived from reverse
    # DNS, users see fake domain names like pwbs2ui4377257x8.irc. These names are
    # generated deterministically from the underlying IP address, but if the underlying
    # IP is not already known, it is infeasible to recover it from the cloaked name.
    ip-cloaking:
        # whether to enable IP cloaking
        enabled: true
        enabled-for-always-on: true
        # fake TLD at the end of the hostname, e.g., pwbs2ui4377257x8.irc
        netname: "irc"
        # the cloaked hostname is derived only from the CIDR (most significant bits
        # of the IP address), up to a configurable number of bits. this is the
        # granularity at which bans will take effect for IPv4. Note that changing
        # this value will invalidate any stored bans.
        cidr-len-ipv4: 32
        # analogous granularity for IPv6
        cidr-len-ipv6: 64
        # number of bits of hash output to include in the cloaked hostname.
        # more bits means less likelihood of distinct IPs colliding,
        # at the cost of a longer cloaked hostname. if this value is set to 0,
        # all users will receive simply `netname` as their cloaked hostname.
        num-bits: 64
# account options
accounts:
    # is account authentication enabled, i.e., can users log into existing accounts?
    authentication-enabled: true
    # account registration
    registration:
        # can users register new accounts for themselves? if this is false, operators with
        # the `accreg` capability can still create accounts with `/NICKSERV SAREGISTER`
        enabled: true
        # can users use the REGISTER command to register before fully connecting?
        allow-before-connect: true
        throttling:
            # whether to limit the rate of new account registrations
            enabled: true
            # how long to keep track of registrations for
            duration: 10m
            max-attempts: 30
        # this is the bcrypt cost we'll use for account passwords
        bcrypt-cost: 9
        # length of time a user has to verify their account before it can be re-registered
        verify-timeout: "32h"
        # options for email verification of account registrations
        email-verification:
            enabled: true
            sender: "support@midnightthoughts.space"
            require-tls: true
            helo-domain: "irc.midnightthoughts.space" # defaults to server name if unset
            # set to `tcp4` to force sending over IPv4, `tcp6` to force IPv6:
            # protocol: "tcp4"
            # set to force a specific source/local IPv4 or IPv6 address:
            # local-address: "1.2.3.4"
            # options to enable DKIM signing of outgoing emails (recommended, but
            # requires creating a DNS entry for the public key):
            # dkim:
            #     domain: "my.network"
            #     selector: "20200229"
            #     key-file: "dkim.pem"
            # to use an MTA/smarthost instead of sending email directly:
            mta:
                server: mail.midnightthoughts.space
                port: 465
                #username: "admin"
                #password: "hunter2"
                implicit-tls: true # TLS from the first byte, typically on port 465
            # addresses that are not accepted for registration:
            address-blacklist:
            #    - "*@mailinator.com"
            address-blacklist-syntax: "glob" # change to "regex" for regular expressions
            # file of newline-delimited address blacklist entries (no enclosing quotes)
            # in the above syntax (i.e. either globs or regexes). supersedes
            # address-blacklist if set:
            # address-blacklist-file: "/path/to/address-blacklist-file"
            timeout: 60s
            # email-based password reset:
            password-reset:
                enabled: true
                # time before we allow resending the email
                cooldown: 1h
                # time for which a password reset code is valid
                timeout: 1d
    # throttle account login attempts (to prevent either password guessing, or DoS
    # attacks on the server aimed at forcing repeated expensive bcrypt computations)
    login-throttling:
        enabled: true
        # window
        duration: 1m
        # number of attempts allowed within the window
        max-attempts: 3
    # some clients (notably Pidgin and Hexchat) offer only a single password field,
    # which makes it impossible to specify a separate server password (for the PASS
    # command) and SASL password. if this option is set to true, a client that
    # successfully authenticates with SASL will not be required to send
    # PASS as well, so it can be configured to authenticate with SASL only.
    skip-server-password: false
    # enable login to accounts via the PASS command, e.g., PASS account:password
    # this is sometimes useful for compatibility with old clients that don't support SASL
    login-via-pass-command: true
    # require-sasl controls whether clients are required to have accounts
    # (and sign into them using SASL) to connect to the server
    require-sasl:
        # if this is enabled, all clients must authenticate with SASL while connecting
        enabled: false
        # IPs/CIDRs which are exempted from the account requirement
        exempted:
            - "localhost"
            # - '10.10.0.0/16'
    # nick-reservation controls how, and whether, nicknames are linked to accounts
    nick-reservation:
        # is there any enforcement of reserved nicknames?
        enabled: true
        # how many nicknames, in addition to the account name, can be reserved?
        additional-nick-limit: 2
        # method describes how nickname reservation is handled
        #   timeout:  let the user change to the registered nickname, give them X seconds
        #             to login and then rename them if they haven't done so
        #   strict:   don't let the user change to the registered nickname unless they're
        #             already logged-in using SASL or NickServ
        #   optional: no enforcement by default, but allow users to opt in to
        #             the enforcement level of their choice
        #
        # 'optional' matches the behavior of other NickServs, but 'strict' is
        # preferable if all your users can enable SASL.
        method: strict
        # allow users to set their own nickname enforcement status, e.g.,
        # to opt in to strict enforcement
        allow-custom-enforcement: false
        # format for guest nicknames:
        # 1. these nicknames cannot be registered or reserved
        # 2. if a client is automatically renamed by the server,
        #    this is the template that will be used (e.g., Guest-nccj6rgmt97cg)
        # 3. if enforce-guest-format (see below) is enabled, clients without
        #    a registered account will have this template applied to their
        #    nicknames (e.g., 'katie' will become 'Guest-katie')
        guest-nickname-format: "Guest-*"
        # when enabled, forces users not logged into an account to use
        # a nickname matching the guest template. a caveat: this may prevent
        # users from choosing nicknames in scripts different from the guest
        # nickname format.
        force-guest-format: false
        # when enabled, forces users logged into an account to use the
        # account name as their nickname. when combined with strict nickname
        # enforcement, this lets users treat nicknames and account names
        # as equivalent for the purpose of ban/invite/exception lists.
        force-nick-equals-account: true
        # parallel setting to force-nick-equals-account: if true, this forbids
        # anonymous users (i.e., users not logged into an account) to change their
        # nickname after the initial connection is complete
        forbid-anonymous-nick-changes: false
    # bouncer controls whether ergo can act as a bouncer, i.e., allowing
    # multiple connections to attach to the same client/nickname identity
    multiclient:
        # when disabled, each connection must use a separate nickname (as is the
        # typical behavior of IRC servers). when enabled, a new connection that
        # has authenticated with SASL can associate itself with an existing
        # client
        enabled: true
        # clients can opt in to bouncer functionality using the cap system, or
        # via nickserv. if this is enabled, then they have to opt out instead
        allowed-by-default: true
        # whether to allow clients that remain on the server even
        # when they have no active connections. The possible values are:
        # "disabled", "opt-in", "opt-out", or "mandatory".
        always-on: "opt-in"
        # whether to mark always-on clients away when they have no active connections:
        auto-away: "opt-in"
    # vhosts controls the assignment of vhosts (strings displayed in place of the user's
    # hostname/IP) by the HostServ service
    vhosts:
        # are vhosts enabled at all?
        enabled: true
        # maximum length of a vhost
        max-length: 64
        # regexp for testing the validity of a vhost
        # (make sure any changes you make here are RFC-compliant)
        valid-regexp: '^[0-9A-Za-z.\-_/]+$'
    default-user-modes: +i
# channel options
channels:
    # modes that are set when new channels are created
    # +n is no-external-messages, +t is op-only-topic,
    # +C is no CTCPs (besides ACTION)
    # see  /QUOTE HELP cmodes  for more channel modes
    default-modes: +ntC
    # how many channels can a client be in at once?
    max-channels-per-client: 100
    # if this is true, new channels can only be created by operators with the
    # `chanreg` operator capability
    operator-only-creation: false
    # channel registration - requires an account
    registration:
        # can users register new channels?
        enabled: true
        # restrict new channel registrations to operators only?
        # (operators can then transfer channels to regular users using /CS TRANSFER)
        operator-only: false
        # how many channels can each account register?
        max-channels-per-account: 15
    # as a crude countermeasure against spambots, anonymous connections younger
    # than this value will get an empty response to /LIST (a time period of 0 disables)
    list-delay: 0s
    # INVITE to an invite-only channel expires after this amount of time
    # (0 or omit for no expiration):
    invite-expiration: 24h
# operator classes
oper-classes:
    # bridge
    "bridge":
        # title shown in WHOIS
        title: Bridge
        # capability names
        capabilities:
            - "relaymsg"
    # local operator
    "local-oper":
        # title shown in WHOIS
        title: Local Operator
        # capability names
        capabilities:
            - "kill"
            - "ban"
            - "nofakelag"
            - "relaymsg"
    # server admin
    "server-admin":
        # title shown in WHOIS
        title: Server Admin
        # oper class this extends from
        extends: "local-oper"
        # capability names
        capabilities:
            - "rehash"
            - "die"
            - "accreg"
            - "sajoin"
            - "samode"
            - "vhosts"
            - "chanreg"
            - "history"
            - "defcon"
            - "history" # modify or delete history messages
            - "massmessage" # message all users on the server
# ircd operators
opers:
    mtrnord:
        class: "server-admin"
        whois-line: "is a person"
        vhost: "staff.midnightthoughts.space"
        modes: +is acdjknoqtuxv
        password: "$2a$04$vRolgPGXPw8qpPb/0FHvjeCl9c.9GTtux/MzDiqAmaq3imUw1B13C"
        auto: true
    heisenbridge:
        class: "bridge"
        whois-line: "is the matrix bridge"
        vhost: "bridge.midnightthoughts.space"
        password: "$2a$04$BU/1e6fAVIoY/QO0Meim0uTgnQayxMpfAOJCGPmyJAG3IYRou0IjO"
# logging, takes inspiration from Insp
logging:
    - # how to log these messages
      #
      #   file    log to given target filename
      #   stdout  log to stdout
      #   stderr  log to stderr
      #   (you can specify multiple methods, e.g., to log to both stderr and a file)
      method: stderr
      # filename to log to, if file method is selected
      # filename: ircd.log

      # type(s) of logs to keep here. you can use - to exclude those types
      #
      # exclusions take precedent over inclusions, so if you exclude a type it will NEVER
      # be logged, even if you explicitly include it
      #
      # useful types include:
      #   *               everything (usually used with exclusing some types below)
      #   server          server startup, rehash, and shutdown events
      #   accounts        account registration and authentication
      #   channels        channel creation and operations
      #   commands        command calling and operations
      #   opers           oper actions, authentication, etc
      #   services        actions related to NickServ, ChanServ, etc.
      #   internal        unexpected runtime behavior, including potential bugs
      #   userinput       raw lines sent by users
      #   useroutput      raw lines sent to users
      type: "* -userinput -useroutput"
      # one of: debug info warn error
      level: info
#-
#   # example of a file log that avoids logging IP addresses
#   method: file
#   filename: ircd.log
#   type: "* -userinput -useroutput -localconnect -localconnect-ip"
#   level: debug

# debug options
debug:
    # when enabled, ergo will attempt to recover from certain kinds of
    # client-triggered runtime errors that would normally crash the server.
    # this makes the server more resilient to DoS, but could result in incorrect
    # behavior. deployments that would prefer to "start from scratch", e.g., by
    # letting the process crash and auto-restarting it with systemd, can set
    # this to false.
    recover-from-errors: true
    # optionally expose a pprof http endpoint: https://golang.org/pkg/net/http/pprof/
    # it is strongly recommended that you don't expose this on a public interface;
    # if you need to access it remotely, you can use an SSH tunnel.
    # set to `null`, "", leave blank, or omit to disable
    # pprof-listener: "localhost:6060"
# datastore configuration
datastore:
    # path to the datastore
    path: /ircd/db/ircd.db
    # if the database schema requires an upgrade, `autoupgrade` will attempt to
    # perform it automatically on startup. the database will be backed
    # up, and if the upgrade fails, the original database will be restored.
    autoupgrade: true
    # connection information for MySQL (currently only used for persistent history):
    mysql:
        enabled: true
        host: "mariadb-maxscale.mariadb-operator.svc.cluster.local"
        port: 3306
        user: "irc"
        history-database: "irc"
        timeout: 3s
        max-conns: 4
        # this may be necessary to prevent middleware from closing your connections:
        #conn-max-lifetime: 180s
# languages config
languages:
    # whether to load languages
    enabled: false
    # default language to use for new clients
    # 'en' is the default English language in the code
    default: en
    # which directory contains our language files
    path: languages
# limits - these need to be the same across the network
limits:
    # nicklen is the max nick length allowed
    nicklen: 32
    # identlen is the max ident length allowed
    identlen: 20
    # realnamelen is the maximum realname length allowed
    realnamelen: 150
    # channellen is the max channel length allowed
    channellen: 64
    # awaylen is the maximum length of an away message
    awaylen: 390
    # kicklen is the maximum length of a kick message
    kicklen: 390
    # topiclen is the maximum length of a channel topic
    topiclen: 390
    # maximum number of monitor entries a client can have
    monitor-entries: 100
    # whowas entries to store
    whowas-entries: 100
    # maximum length of channel lists (beI modes)
    chan-list-modes: 100
    # maximum number of messages to accept during registration (prevents
    # DoS / resource exhaustion attacks):
    registration-messages: 1024
    # message length limits for the new multiline cap
    multiline:
        max-bytes: 4096 # 0 means disabled
        max-lines: 100 # 0 means no limit
# fakelag: prevents clients from spamming commands too rapidly
fakelag:
    # whether to enforce fakelag
    enabled: true
    # time unit for counting command rates
    window: 1s
    # clients can send this many commands without fakelag being imposed
    burst-limit: 5
    # once clients have exceeded their burst allowance, they can send only
    # this many commands per `window`:
    messages-per-window: 2
    # client status resets to the default state if they go this long without
    # sending any commands:
    cooldown: 2s
    # exempt a certain number of command invocations per session from fakelag;
    # this is to speed up "resynchronization" of client state during reattach
    command-budgets:
        "CHATHISTORY": 16
        "MARKREAD": 16
        "MONITOR": 1
        "WHO": 4
        "WEBPUSH": 1
# the roleplay commands are semi-standardized extensions to IRC that allow
# sending and receiving messages from pseudo-nicknames. this can be used either
# for actual roleplaying, or for bridging IRC with other protocols.
roleplay:
    # are roleplay commands enabled at all? (channels and clients still have to
    # opt in individually with the +E mode)
    enabled: true
    # require the "roleplay" oper capability to send roleplay messages?
    require-oper: false
    # require channel operator permissions to send roleplay messages?
    require-chanops: false
    # add the real nickname, in parentheses, to the end of every roleplay message?
    add-suffix: true
# message history tracking, for the RESUME extension and possibly other uses in future
history:
    # should we store messages for later playback?
    # the current implementation stores messages in RAM only; they do not persist
    # across server restarts. however, you should not enable this unless you understand
    # how it interacts with the GDPR and/or any data privacy laws that apply
    # in your country and the countries of your users.
    enabled: true
    # how many channel-specific events (messages, joins, parts) should be tracked per channel?
    channel-length: 4096
    # how many direct messages and notices should be tracked per user?
    client-length: 512
    # how long should we try to preserve messages?
    # if `autoresize-window` is 0, the in-memory message buffers are preallocated to
    # their maximum length. if it is nonzero, the buffers are initially small and
    # are dynamically expanded up to the maximum length. if the buffer is full
    # and the oldest message is older than `autoresize-window`, then it will overwrite
    # the oldest message rather than resize; otherwise, it will expand if possible.
    autoresize-window: 2w
    # number of messages to automatically play back on channel join (0 to disable):
    autoreplay-on-join: 0
    # maximum number of CHATHISTORY messages that can be
    # requested at once (0 disables support for CHATHISTORY)
    chathistory-maxmessages: 100
    # maximum number of messages that can be replayed at once during znc emulation
    # (znc.in/playback, or automatic replay on initial reattach to a persistent client):
    znc-maxmessages: 2048
    # options to delete old messages, or prevent them from being retrieved
    restrictions:
        # if this is set, messages older than this cannot be retrieved by anyone
        # (and will eventually be deleted from persistent storage, if that's enabled)
        expire-time: 2w
        # this restricts access to channel history (it can be overridden by channel
        # owners). options are: 'none' (no restrictions), 'registration-time'
        # (logged-in users cannot retrieve messages older than their account
        # registration date, and anonymous users cannot retrieve messages older than
        # their sign-on time, modulo the grace-period described below), and
        # 'join-time' (users cannot retrieve messages older than the time they
        # joined the channel, so only always-on clients can view history).
        query-cutoff: "registration-time"
        # if query-cutoff is set to 'registration-time', this allows retrieval
        # of messages that are up to 'grace-period' older than the above cutoff.
        # if you use 'registration-time', this is recommended to allow logged-out
        # users to query history after disconnections.
        grace-period: 1h
    # options to store history messages in a persistent database (currently only MySQL):
    persistent:
        enabled: true
        # store unregistered channel messages in the persistent database?
        unregistered-channels: false
        # for a registered channel, the channel owner can potentially customize
        # the history storage setting. as the server operator, your options are
        # 'disabled' (no persistent storage, regardless of per-channel setting),
        # 'opt-in', 'opt-out', and 'mandatory' (force persistent storage, ignoring
        # per-channel setting):
        registered-channels: "opt-out"
        # direct messages are only stored in the database for persistent clients;
        # you can control how they are stored here (same options as above)
        direct-messages: "opt-in"
    # options to control how messages are stored and deleted:
    retention:
        # allow users to delete their own messages from history?
        allow-individual-delete: true
        # if persistent history is enabled, create additional index tables,
        # allowing deletion of JSON export of an account's messages. this
        # may be needed for compliance with data privacy regulations.
        enable-account-indexing: true
    # options to control storage of TAGMSG
    tagmsg-storage:
        # by default, should TAGMSG be stored?
        default: false
        # if `default` is false, store TAGMSG containing any of these tags:
        whitelist:
            - "+draft/react"
            - "+react"
            # if `default` is true, don't store TAGMSG containing any of these tags:
            #blacklist:
            #    - "+draft/typing"
            #    - "typing"
# whether to allow customization of the config at runtime using environment variables,
# e.g., ERGO__SERVER__MAX_SENDQ=128k. see the manual for more details.
allow-environment-overrides: true
# experimental support for mobile push notifications
# see the manual for potential security, privacy, and performance implications.
# DO NOT enable if you are running a Tor or I2P hidden service (i.e. one
# with no public IP listeners, only Tor/I2P listeners).
webpush:
    # are push notifications enabled at all?
    enabled: true
    # request timeout for POST'ing the http notification
    timeout: 10s
    # delay sending the notification for this amount of time, then suppress it
    # if the client sent MARKREAD to indicate that it was read on another device
    delay: 0s
    # subscriber field for the VAPID JWT authorization:
    subscriber: "https://irc.midnightthoughts.space/"
    # maximum number of push subscriptions per user
    max-subscriptions: 4
    # expiration time for a push subscription; it must be renewed within this time
    # by the client reconnecting to IRC. we also detect whether the client is no longer
    # successfully receiving push messages.
    expiration: 14d
